    fun startNewGame(selectedPlayers: List<Player>, selectedPointLimit: Int) {

        TRACE (DEBUG) { "selectedPlayers : $selectedPlayers, selectedPointLimit : $selectedPointLimit" }

        val removedColors = if (selectedPlayers.size <= Constants.GAME_REDUCED_COLOR_THRESHOLD) {
            Constants.DECK_REMOVED_COLORS
        } else {
            emptySet()
        }

        val deck = DeckRepository.generateDeck(shuffle = true, removedColors = removedColors)

        val mutableDeck = mutableStateListOf<Card>().apply { addAll(deck) }

        var newGameState = GameState(
            players = selectedPlayers,
            pointLimit = selectedPointLimit,
            deck = mutableDeck,
            currentPlayerIndex = 0,
            currentCombinationOnMat = Combination(mutableListOf()),
            discardPile = mutableStateListOf(),
            skipCount = 0,  // Initialize skipCount to 0
            screen = GameScreens.PLAYING
        )


        var newGameState = GameState(
            players = selectedPlayers,
            pointLimit = selectedPointLimit,
            deck = mutableDeck,
            startingPlayerIndex = 0,
            currentPlayerIndex = 0,
            currentCombinationOnMat = Combination(mutableListOf()),
            discardPile = mutableStateListOf(),
            skipCount = 0,  // Initialize skipCount to 0
            screen = GameScreens.PLAYING
        )


        // Deal the cards across all players and update the game state.
        newGameState = dealCards(newGameState)
        gameViewModel?.updateGameState(newGameState)
            ?: TRACE (ERROR) { "ERROR: GameViewModel is not initialized!" }

        TRACE (INFO) { "Initial gameState ${getViewModel().gameState}" }
    }
